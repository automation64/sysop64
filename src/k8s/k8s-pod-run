#!/usr/bin/env bash
# template: 1.0.0
#######################################
# K8S / Pod / Run
#
# Version: 1.0.2
#
#######################################
# Copyright [2024] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

declare SYSOP64_CORE_PATH_ROOT="${SYSOP64_CORE_PATH_ROOT:-/opt/sysop64}"
# shellcheck source-path=SCRIPTDIR/..
source "${SYSOP64_CORE_PATH_ROOT}/core/core-lib" || { echo "Error: unable to load module library" && exit 1; }
# shellcheck source-path=SCRIPTDIR/../../lib/bl64
source "${SYSOP64_CORE_PATH_BL64}/bashlib64-module-txt.bash" &&
  source "${SYSOP64_CORE_PATH_BL64}/bashlib64-module-k8s.bash" &&
  source "${SYSOP64_CORE_PATH_BL64}/bashlib64-core.bash" ||
  { echo "Error: unable to load bashlib64" && exit 1; }
# shellcheck source-path=SCRIPT_PATH/..
source "${SYSOP64_CORE_PATH_ROOT}/k8s/k8s-lib" || { echo "Error: unable to load module library" && exit 1; }

#
# Functions
#

function shell_run() {
  bl64_dbg_app_show_function "$@"
  local namespace="$1"
  local image="$2"
  local entrypoint="$3"
  local pod_name='sysop64-shell'

  [[ "$entrypoint" == "$BL64_VAR_DEFAULT" ]] && entrypoint='sh'
  [[ "$image" == "$BL64_VAR_DEFAULT" ]] && image='alpine'

  bl64_msg_show_task "Run interactive shell (${namespace}/${pod_name} -> ${image})"
  # shellcheck disable=SC2086,SC2046
  bl64_k8s_run_kubectl \
    "$BL64_VAR_DEFAULT" \
    run \
    "$pod_name" \
    --namespace "$namespace" \
    --image="$image" \
    --attach --rm --tty --stdin --restart=Never \
    -- "$entrypoint"
}

function initialize() {
  bl64_dbg_app_show_function "$@"
  # shellcheck disable=SC2034
  local command="$1"

  bl64_check_parameter 'command' ||
    { help && return 1; }

  bl64_k8s_setup
}

function help() {
  bl64_msg_show_usage \
    '[-s] [-i Image] [-e EntryPoint] [-n NameSpace] [-V Verbose] [-D Debug] [-h]' \
    'K8S / Pod / Run' \
    '
    -s           : Run interactive shell (Default)
    ' '
    -h           : Show help
    ' '
    -i Image     : Full image path for the container. Default: alpine
    -e EntryPoint: Command to run in the container. Default: sh
    -n NameSpace : K8S namespace where the pod will run. Default: default
    -V Verbose   : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
    -D Debug     : Enable debugging mode. Format: one of BL64_DBG_TARGET_*
    '
}

#
# Main
#

declare command='shell_run'
declare debug="$BL64_DBG_TARGET_NONE"
declare option=''
declare verbose="$BL64_MSG_VERBOSE_ALL"
declare namespace='default'
declare image="$BL64_VAR_DEFAULT"
declare entrypoint="$BL64_VAR_DEFAULT"

while getopts ':si:n:e:V:D:h' option; do
  case "$option" in
  s) command='shell_run' ;;
  n) namespace="$OPTARG" ;;
  i) image="$OPTARG" ;;
  e) entrypoint="$OPTARG" ;;
  V) verbose="$OPTARG" ;;
  D) debug="$OPTARG" ;;
  h) help && exit 0 ;;
  *) help && exit 1 ;;
  esac
done
bl64_dbg_set_level "$debug" && bl64_msg_set_level "$verbose" || exit $?
initialize "$command" || exit $?

bl64_msg_show_batch_start "$command"
"${command}" "$namespace" "$image" "$entrypoint"
bl64_msg_show_batch_finish $? "$command"
