#!/usr/bin/env bash
# template-task: 3.0.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

declare S64_CORE_PATH_AT64="${HOME}/at64"
[[ ! -d "$S64_CORE_PATH_AT64" ]] && S64_CORE_PATH_AT64='/opt'
declare S64_CORE_PATH_ROOT="${S64_CORE_PATH_ROOT:-${S64_CORE_PATH_AT64}/sysop64}"
# shellcheck disable=SC2015 source-path=SCRIPTDIR/..
source "${S64_CORE_PATH_ROOT}/core/core-lib" && source "${S64_CORE_PATH_ROOT}/core/k8s-lib" || { echo "Error: unable to load module library (S64_CORE_PATH_AT64=${S64_CORE_PATH_AT64})" && exit 1; }
# shellcheck disable=SC2015,SC2154 source-path=SCRIPTDIR/../../lib/bl64
source "${S64_CORE_PATH_BL64}/bashlib64-core.bash" || { echo 'Error: unable to load bashlib64' && exit 1; }

#
# Functions
#

function shell_run() {
  bl64_dbg_app_show_function "$@"
  local namespace="$1"
  local image="$2"
  local entrypoint="$3"
  local pod_name='sysop64-shell'

  [[ "$entrypoint" == "$BL64_VAR_DEFAULT" ]] && entrypoint='sh'
  [[ "$image" == "$BL64_VAR_DEFAULT" ]] && image='alpine'

  bl64_msg_show_task "Run interactive shell (${namespace}/${pod_name} -> ${image})"
  # shellcheck disable=SC2086,SC2046
  bl64_k8s_run_kubectl \
    "$BL64_VAR_DEFAULT" \
    run \
    "$pod_name" \
    --namespace "$namespace" \
    --image="$image" \
    --attach --rm --tty --stdin --restart=Never \
    -- "$entrypoint"
}

function my_initialize() {
  bl64_dbg_app_show_function
  s64_k8s_lib_setup
}

#
# Main
#

declare MY_COMMAND='shell_run'
declare MY_OPTION=''
declare K8S_NAMESPACE='default'
declare CONTAINER_IMAGE="$BL64_VAR_DEFAULT"
declare CONTAINER_ENTRYPOINT="$BL64_VAR_DEFAULT"

bl64_lib_script_version_set '3.0.0'
bl64_msg_help_usage_set '[-s] [-i Image] [-e EntryPoint] [-n NameSpace] [-V Verbose] [-D Debug] [-h]'
bl64_msg_help_about_set 'K8S / Pod / Run'
# shellcheck disable=SC2016
bl64_msg_help_parameters_set \
'-s           : Run interactive shell (Default)
-h           : Show help
-i Image     : Full image path for the container. Default: alpine
-e EntryPoint: Command to run in the container. Default: sh
-n NameSpace : K8S namespace where the pod will run. Default: default
-V Verbose   : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
-D Debug     : Enable debugging mode. Format: one of BL64_DBG_TARGET_*
'

while getopts ':si:n:e:V:D:h' MY_OPTION; do
  case "$MY_OPTION" in
  s) MY_COMMAND='shell_run' ;;
  n) K8S_NAMESPACE="$OPTARG" ;;
  i) CONTAINER_IMAGE="$OPTARG" ;;
  e) CONTAINER_ENTRYPOINT="$OPTARG" ;;
  V) S64_CORE_SET_VERBOSE="$OPTARG" ;;
  D) S64_CORE_SET_DEBUG="$OPTARG" ;;
  h) bl64_msg_help_show && exit 0 ;;
  *) bl64_msg_help_show && exit 1 ;;
  esac
done
bl64_dbg_set_level "$S64_CORE_SET_DEBUG" && bl64_msg_set_level "$S64_CORE_SET_VERBOSE" && my_initialize || exit $?

bl64_msg_show_batch_start "${BL64_SCRIPT_ID}:$MY_COMMAND"
"${MY_COMMAND}" "$K8S_NAMESPACE" "$CONTAINER_IMAGE" "$CONTAINER_ENTRYPOINT"
bl64_msg_show_batch_finish $? "${BL64_SCRIPT_ID}:$MY_COMMAND"
