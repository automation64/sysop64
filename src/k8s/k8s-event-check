#!/usr/bin/env bash
# template: 1.0.0
#######################################
# K8S / Event / Check
#
# Version: 1.0.1
#
#######################################
# Copyright [2024] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

declare SYSOP64_CORE_PATH_ROOT="${SYSOP64_CORE_PATH_ROOT:-/opt/sysop64}"
# shellcheck source-path=SCRIPTDIR/..
source "${SYSOP64_CORE_PATH_ROOT}/core/core-lib" || { echo "Error: unable to load module library" && exit 1; }
# shellcheck disable=SC2015 source-path=SCRIPTDIR/../../lib/bl64
source "${SYSOP64_CORE_PATH_BL64}/bashlib64-module-txt.bash" &&
  source "${SYSOP64_CORE_PATH_BL64}/bashlib64-module-k8s.bash" &&
  source "${SYSOP64_CORE_PATH_BL64}/bashlib64-core.bash" ||
  { echo "Error: unable to load bashlib64" && exit 1; }
# shellcheck source-path=SCRIPTDIR/..
source "${SYSOP64_CORE_PATH_ROOT}/k8s/k8s-lib" || { echo "Error: unable to load module library" && exit 1; }

#
# Functions
#

function all_check() {
  bl64_dbg_app_show_function "$@"
  local namespace="$1"
  local expand="$2"

  bl64_msg_show_info 'Events of type Warning'
  # shellcheck disable=SC2086,SC2046
  bl64_k8s_run_kubectl \
    "$BL64_VAR_DEFAULT" \
    get events \
    $(k8s_lib_cli_set_ns "$namespace") \
    $(k8s_lib_cli_set_output "$expand") \
    --field-selector='type=Warning' \
    --sort-by='lastTimestamp'
}

function pod_check() {
  bl64_dbg_app_show_function "$@"
  local namespace="$1"
  local expand="$2"

  bl64_msg_show_info 'Events of type Warning for Pods not healthy'
  # shellcheck disable=SC2086,SC2046
  bl64_k8s_run_kubectl \
    "$BL64_VAR_DEFAULT" \
    get events \
    $(k8s_lib_cli_set_ns "$namespace") \
    $(k8s_lib_cli_set_output "$expand") \
    --field-selector='type=Warning' \
    --field-selector='involvedObject.ind=Pod' \
    --field-selector='reason=BackOff' \
    --sort-by='lastTimestamp'
}

function initialize() {
  bl64_dbg_app_show_function "$@"
  # shellcheck disable=SC2034
  local command="$1"

  bl64_check_parameter 'command' ||
    { help && return 1; }

  bl64_k8s_setup
}

function help() {

  bl64_msg_show_usage \
    '-a|-p [-n Namespace] [-j] [-V Verbose] [-D Debug] [-h]' \
    'K8S / Event / Check' \
    '
    -a         : Check all events
    -p         : Check pod events
    ' '
    -h         : Show help
    -j         : Expand events using JSON format
    ' '
    -n Namespace: Kubernetes namespace. Default: all
    -V Verbose : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
    -D Debug   : Enable debugging mode. Format: one of BL64_DBG_TARGET_*
    '
}

#
# Main
#

declare command='all_check'
declare debug="$BL64_DBG_TARGET_NONE"
declare option=''
declare expand="$BL64_VAR_DEFAULT"
declare namespace="$BL64_VAR_DEFAULT"
declare verbose="$BL64_MSG_VERBOSE_ALL"

while getopts ':apjn:V:D:h' option; do
  case "$option" in
  a) command='all_check' ;;
  p) command='pod_check' ;;
  n) namespace="$OPTARG" ;;
  j) expand='json' ;;
  V) verbose="$OPTARG" ;;
  D) debug="$OPTARG" ;;
  h) help && exit 0 ;;
  *) help && exit 1 ;;
  esac
done
bl64_dbg_set_level "$SYSOP64_CORE_SET_DEBUG" && bl64_msg_set_level "$SYSOP64_CORE_SET_VERBOSE" || exit $?
initialize "$command" || exit $?

bl64_msg_show_batch_start "$command"
"$command" "$namespace" "$expand"
bl64_msg_show_batch_finish $? "$command"
