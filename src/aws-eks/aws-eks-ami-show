#!/usr/bin/env bash
# template-task: 3.0.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

declare S64_CORE_PATH_AT64="${HOME}/at64"
[[ ! -d "$S64_CORE_PATH_AT64" ]] && S64_CORE_PATH_AT64='/opt'
declare S64_CORE_PATH_ROOT="${S64_CORE_PATH_ROOT:-${S64_CORE_PATH_AT64}/sysop64}"
# shellcheck disable=SC2015 source-path=SCRIPTDIR/..
source "${S64_CORE_PATH_ROOT}/core/core-lib" && source "${S64_CORE_PATH_ROOT}/core/aws-lib" || { echo "Error: unable to load module library" && exit 1; }
# shellcheck disable=SC2015,SC2154 source-path=SCRIPTDIR/../../lib/bl64
source "${S64_CORE_PATH_BL64}/bashlib64-core.bash" || { echo 'Error: unable to load bashlib64' && exit 1; }

#
# Functions
#

function show_recommended() {
  bl64_dbg_app_show_function "$@"
  local ami_family="$1"
  local k8s_version="$2"
  local endpoint=''

  if [[ "$ami_family" == 'AL2' ]]; then
    endpoint="$S64_AWS_API_EKS_AMI_AL2"
  elif [[ "$ami_family" == 'AL2023' ]]; then
    endpoint="$S64_AWS_API_EKS_AMI_AL2023_X86_64_STANDARD"
  fi

  bl64_aws_run_aws \
    ssm get-parameter \
    --name "/aws/service/eks/optimized-ami/${k8s_version}/${endpoint}/recommended/image_id" \
    --query 'Parameter.Value'
}

function initialize() {
  bl64_dbg_app_show_function
  bl64_check_parameter 'COMMAND' || { help && return 1; }
  s64_aws_lib_setup
}

#
# Main
#

declare COMMAND='show_recommended'
declare OPTION=''
declare AMI_FAMILY='AL2023'
declare K8S_VERSION='1.29'

bl64_lib_script_version_set '2.0.0'
bl64_msg_help_usage_set '-l [-r Version] [-a Family] [-V Verbose] [-D Debug] [-h]'
bl64_msg_help_about_set 'AWS EKS / AMI / Info'
# shellcheck disable=SC2016
bl64_msg_help_parameters_set \
'-l         : Show recommended AMI for EKS version
-h         : Show help
-a Family  : AMI Family. Format: AL2|AL2023
-r Version : K8S version for the AMI. Format: X.Y
-V Verbose : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
-D Debug   : Enable debugging mode. Format: one of BL64_DBG_TARGET_*'

while getopts ':la:r:V:D:h' OPTION; do
  case "$OPTION" in
  l) COMMAND='show_recommended' ;;
  a) AMI_FAMILY="$OPTARG" ;;
  r) K8S_VERSION="$OPTARG" ;;
  V) S64_CORE_SET_VERBOSE="$OPTARG" ;;
  D) S64_CORE_SET_DEBUG="$OPTARG" ;;
  h) bl64_msg_help_show && exit 0 ;;
  *) bl64_msg_help_show && exit 1 ;;
  esac
done
bl64_dbg_set_level "$S64_CORE_SET_DEBUG" && bl64_msg_set_level "$S64_CORE_SET_VERBOSE" && initialize || exit $?

bl64_msg_show_batch_start "${BL64_SCRIPT_ID}:$COMMAND"
"${COMMAND}" "$AMI_FAMILY" "$K8S_VERSION"
bl64_msg_show_batch_finish $? "${BL64_SCRIPT_ID}:$COMMAND"
