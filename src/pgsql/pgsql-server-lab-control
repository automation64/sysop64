#!/usr/bin/env bash
# Template: 1.0.0
#######################################
# PGSQL / Server / Lab / Control
#
# Version: 1.0.0
#
#######################################
# Copyright [2024] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

declare SYSOP64_CORE_PATH_ROOT="${SYSOP64_CORE_PATH_ROOT:-/opt/sysop64}"
# shellcheck source-path=SCRIPTDIR/../core
source "${SYSOP64_CORE_PATH_ROOT}/core/core-lib" || { echo "Error: unable to load module library" && exit 1; }
# shellcheck source-path=SCRIPTDIR/../lib/bl64
source "${SYSOP64_CORE_PATH_BL64}/bashlib64-module-cnt.bash" &&
  source "${SYSOP64_CORE_PATH_BL64}/bashlib64-core.bash" || { echo "Error: unable to load bashlib64" && exit 1; }
# shellcheck source-path=SCRIPT_PATH
source "${SYSOP64_CORE_PATH_ROOT}/pgsql/pgsql-lib" || { echo "Error: unable to load module library" && exit 1; }

#
# Functions
#

function start() {
  bl64_dbg_app_show_function
  local container_port='5432'
  bl64_msg_show_task 'start Postgresql Server in container mode'
  bl64_cnt_run \
    --name "$SYSOP64_PGSQL_SERVER_LAB_NAME" \
    --env POSTGRES_PASSWORD="$SYSOP64_PGSQL_SERVER_LAB_PASSWORD" \
    --detach \
    --publish "$container_port:$container_port" \
    postgres &&
    bl64_msg_show_info "Starded container information
Container Name: ${SYSOP64_PGSQL_SERVER_LAB_NAME}
Password: ${SYSOP64_PGSQL_SERVER_LAB_PASSWORD}
Port: ${container_port}"
}

function stop() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'stop Postgresql Server running in container mode'
  bl64_cnt_cli \
    stop \
    "$SYSOP64_PGSQL_SERVER_LAB_NAME" &&
    bl64_cnt_cli \
      rm \
      "$SYSOP64_PGSQL_SERVER_LAB_NAME"
}

function initialize() {
  bl64_dbg_app_show_function "$@"
  # shellcheck disable=SC2034
  local command="$1"

  bl64_check_parameter 'command' ||
    { help && return 1; }

  bl64_cnt_check_not_in_container &&
    bl64_cnt_setup
}

function help() {
  bl64_msg_show_usage \
    '-s|-o [-V Verbose] [-D Debug] [-h]' \
    'PGSQL / Server / Lab / Control' \
    '
    -s         : Start container and detach
    -o         : Stop detached container
    ' '
    -h         : Show help
    ' '
    -V Verbose : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
    -D Debug   : Enable debugging mode. Format: one of BL64_DBG_TARGET_*
    '
}

#
# Main
#

declare command="$BL64_VAR_NULL"
declare debug="$BL64_DBG_TARGET_NONE"
declare option=''
declare verbose="$BL64_MSG_VERBOSE_ALL"

(($# == 0)) && help && exit 1
while getopts ':soV:D:h' option; do
  case "$option" in
  s) command='start' ;;
  o) command='stop' ;;
  V) verbose="$OPTARG" ;;
  D) debug="$OPTARG" ;;
  h) help && exit 0 ;;
  *) help && exit 1 ;;
  esac
done
bl64_dbg_set_level "$debug" && bl64_msg_set_level "$verbose" || exit $?
initialize "$command" || exit $?

bl64_msg_show_batch_start "$command"
"${command}"
bl64_msg_show_batch_finish $? "$command"
