#!/usr/bin/env bash
# template-task: 2.0.0
#######################################
# PGSQL / Table / Info
#
# Version: 1.0.1
#
#######################################
# Copyright [2024] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

declare S64_CORE_PATH_ROOT="${S64_CORE_PATH_ROOT:-/opt/sysop64}"
# shellcheck source-path=SCRIPTDIR/..
source "${S64_CORE_PATH_ROOT}/core/core-lib" && source "${S64_CORE_PATH_ROOT}/core/pgsql-lib" || { echo "Error: unable to load module library" && exit 1; }
# shellcheck disable=SC2015 source-path=SCRIPTDIR/../../lib/bl64
source "${S64_CORE_PATH_BL64}/bashlib64-core.bash" || { echo 'Error: unable to load bashlib64' && exit 1; }

#
# Globals
#

export PGPASSWORD
export PSQL_PAGER=''

#
# Functions
#

function list() {
  bl64_dbg_app_show_function "$@"
  local table="$1"
  s64_psql_lib_run_psql \
    --host="$S64_PGSQL_SERVER_HOST" \
    --port="$S64_PGSQL_SERVER_PORT" \
    --dbname="$S64_PGSQL_DB_NAME" \
    --username="$S64_PGSQL_SERVER_USER" \
    --COMMAND="\\dt"
}

function describe() {
  bl64_dbg_app_show_function "$@"
  local table="$1"
  s64_psql_lib_run_psql \
    --host="$S64_PGSQL_SERVER_HOST" \
    --port="$S64_PGSQL_SERVER_PORT" \
    --dbname="$S64_PGSQL_DB_NAME" \
    --username="$S64_PGSQL_SERVER_USER" \
    --COMMAND="\\d $table"
}

function initialize() {
  bl64_dbg_app_show_function

  bl64_check_parameter 'COMMAND' ||
    { help && return 1; }

  s64_psql_lib_setup &&
    bl64_check_export 'S64_PGSQL_SERVER_PASSWORD' ||
    return $?

  if [[ "${BL64_SCRIPT_ID}:$COMMAND" == 'describe' ]]; then
    bl64_check_parameter 'table' ||
      return $?
  fi

  PGPASSWORD="$S64_PGSQL_SERVER_PASSWORD"
}

function help() {
  bl64_msg_show_usage \
    '-l|-e [-o Host] [-p Port] [-u User] [-b DB] [-t Table] [-V Verbose] [-D Debug] [-h]' \
    'PGSQL / Table / Info' \
    '
    -l         : List tables
    -e         : Describe table
    ' '
    -o Host    : Host FQDN. Alternative shell-env: S64_PGSQL_SERVER_HOST  
    -p Port    : DB Port. Alternative shell-ehv: S64_PGSQL_SERVER_PORT 
    -u User    : DB User. Alternative shell-ehv: S64_PGSQL_SERVER_USER 
    -b DB      : DB Name. Alternative shell-ehv: S64_PGSQL_DB_NAME
    -t Table   : DB Table.
    -h         : Show help
    ' '
    -V Verbose : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
    -D Debug   : Enable debugging mode. Format: one of BL64_DBG_TARGET_*
    '
}

#
# Main
#

declare COMMAND="$BL64_VAR_NULL"
declare OPTION=''
declare TABLE_NAME="$BL64_VAR_DEFAULT"

(($# == 0)) && help && exit 1
while getopts ':leo:p:u:b:t:V:D:h' OPTION; do
  case "$OPTION" in
  l) COMMAND='list' ;;
  e) COMMAND='describe' ;;
  o) S64_PGSQL_SERVER_HOST="$OPTARG" ;;
  p) S64_PGSQL_SERVER_PORT="$OPTARG" ;;
  u) S64_PGSQL_SERVER_USER="$OPTARG" ;;
  b) S64_PGSQL_DB_NAME="$OPTARG" ;;
  t) TABLE_NAME="$OPTARG" ;;
  V) S64_CORE_SET_VERBOSE="$OPTARG" ;;
  D) S64_CORE_SET_DEBUG="$OPTARG" ;;
  h) help && exit 0 ;;
  *) help && exit 1 ;;
  esac
done
bl64_dbg_set_level "$S64_CORE_SET_DEBUG" && bl64_msg_set_level "$S64_CORE_SET_VERBOSE" && initialize || exit $?

bl64_msg_show_batch_start "${BL64_SCRIPT_ID}:$COMMAND"
"${COMMAND}" "$TABLE_NAME"
bl64_msg_show_batch_finish $? "${BL64_SCRIPT_ID}:$COMMAND"
