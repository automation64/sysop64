#!/usr/bin/env bash
# template: 1.0.0
# template-import: 1.0.0
#######################################
# Kind / Cluster / Show
#
# Version: 1.0.0
#
#######################################
# Copyright [2024] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

declare S64_CORE_PATH_ROOT="${S64_CORE_PATH_ROOT:-/opt/sysop64}"
# shellcheck source-path=SCRIPTDIR/..
source "${S64_CORE_PATH_ROOT}/core/core-lib" || { echo "Error: unable to load module library" && exit 1; }
# shellcheck disable=SC2015 source-path=SCRIPTDIR/../../lib/bl64
source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fs.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-txt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-xsv.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fmt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-bsh.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-k8s.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-cnt.bash" &&
  source "${S64_CORE_PATH_BL64}/bashlib64-core.bash" || { echo 'Error: unable to load bashlib64' && exit 1; }
# shellcheck source-path=SCRIPTDIR/..
source "${S64_CORE_PATH_ROOT}/kind/kind-lib" || { echo "Error: unable to load module library" && exit 1; }

#
# Functions
#

function show_k8s_show() {
  bl64_dbg_app_show_function
  bl64_msg_show_info 'cluster configuration'
  bl64_k8s_run_kubectl \
    "$BL64_VAR_DEFAULT" \
    cluster-info
}

function show_kind_ip_show() {
  bl64_dbg_app_show_function
  bl64_msg_show_info 'kubernetes nodes IP range'
  printf '\nIPAM.Config: %s\n' \
    "$(
      bl64_cnt_cli \
        network \
        inspect \
        -f '{{.IPAM.Config}}' \
        kind
    )"
}

function initialize() {
  bl64_dbg_app_show_function
  s64_kind_lib_setup &&
    bl64_cnt_setup &&
    bl64_k8s_setup
}

#
# Main
#

declare command='kind-cluster-show'

bl64_dbg_set_level "$S64_CORE_SET_DEBUG" && bl64_msg_set_level "$S64_CORE_SET_VERBOSE" && initialize || exit $?

bl64_msg_show_batch_start "$command"
show_k8s_show &&
  show_kind_ip_show
bl64_msg_show_batch_finish $? "$command"
