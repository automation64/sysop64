#!/usr/bin/env bash
# template-one: 2.0.0
# template-import: 1.0.0
#######################################
# Linux / Distro / Upgrade
#
# Version: 1.1.0
#
#######################################
# Copyright [2024] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

declare S64_CORE_PATH_ROOT="${S64_CORE_PATH_ROOT:-/opt/sysop64}"
# shellcheck disable=SC2015 source-path=SCRIPTDIR/..
source "${S64_CORE_PATH_ROOT}/core/core-lib" && source "${S64_CORE_PATH_ROOT}/core/linux-lib" || { echo "Error: unable to load module library" && exit 1; }
# shellcheck disable=SC2015,SC2154 source-path=SCRIPTDIR/../../lib/bl64
source "${S64_CORE_PATH_BL64}/bashlib64-core.bash" || { echo 'Error: unable to load bashlib64' && exit 1; }

#
# Globals
#

# Distro dependant upgrade COMMAND
declare _S64_LINUX_DISTRO_DO_RELEASE_UPGRADE=''

#
# Functions
#

function prepare_fedora() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'install OS upgrade tools'
  bl64_pkg_install \
    dnf-utils \
    dnf-plugin-system-upgrade &&
    bl64_msg_show_task 'auto-remove unused packages' &&
    bl64_pkg_cleanup &&
    bl64_pkg_run_dnf \
      $BL64_PKG_SET_ASSUME_YES \
      autoremove &&
    bl64_msg_show_task 'upgrade all packages' &&
    bl64_pkg_upgrade

}

function upgrade_fedora() {
  bl64_dbg_app_show_function "$@"
  local release="$1"
  bl64_pkg_run_dnf \
    system-upgrade download --releasever="$release" &&
    bl64_pkg_run_dnf \
      system-upgrade reboot
}

function prepare_ubuntu() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'auto-remove unused packages'
  bl64_pkg_cleanup &&
    bl64_pkg_run_apt autoremove "$BL64_PKG_SET_ASSUME_YES" &&
    bl64_msg_show_task 'prepare for upgrade' &&
    bl64_pkg_prepare &&
    bl64_msg_show_task 'upgrade all packages' &&
    bl64_pkg_run_apt upgrade \
      --with-new-pkgs \
      --show-progress \
      "$BL64_PKG_SET_ASSUME_YES"
}

function upgrade_ubuntu() {
  bl64_dbg_app_show_function
  "$_S64_LINUX_DISTRO_DO_RELEASE_UPGRADE" \
    --allow-third-party \
    --frontend=DistUpgradeViewNonInteractive
}

function prepare() {
  bl64_dbg_app_show_function
  bl64_ui_ask_confirmation 'Warning: the task will auto-remove and upgrade all packages to the latest version for the current distro release' ||
    return $?
  case "$BL64_OS_DISTRO" in
  ${BL64_OS_UB}-*) prepare_ubuntu ;;
  ${BL64_OS_FD}-*) prepare_fedora ;;
  *) bl64_check_alert_unsupported ;;
  esac
}

function upgrade() {
  bl64_dbg_app_show_function "$@"
  local release="$1"
  bl64_ui_ask_confirmation 'Warning: the task will perform unattended OS upgrade to the next available distro release' ||
    return $?
  case "$BL64_OS_DISTRO" in
  ${BL64_OS_UB}-*) upgrade_ubuntu ;;
  ${BL64_OS_FD}-*) upgrade_fedora "$release" ;;
  *) bl64_check_alert_unsupported ;;
  esac
}

function initialize() {
  bl64_dbg_app_show_function

  bl64_check_parameter 'COMMAND' ||
    { help && return 1; }

  bl64_check_privilege_root &&
    bl64_os_check_compatibility \
      "${BL64_OS_UB}-23" \
      "${BL64_OS_FD}-39" &&
    s64_linux_lib_setup ||
    return $?

  if [[ "$BL64_SCRIPT_ID" == 'upgrade' ]]; then
    case "$BL64_OS_DISTRO" in
    ${BL64_OS_UB}-*)
      _S64_LINUX_DISTRO_DO_RELEASE_UPGRADE='/bin/do-release-upgrade'
      bl64_check_command "$_S64_LINUX_DISTRO_DO_RELEASE_UPGRADE"
      ;;
    *) : ;;
    esac
  fi
}

function help() {
  bl64_msg_show_usage \
    '<-p|-u> [-r Release] [-V Verbose] [-D Debug] [-h]' \
    'Linux / Distro / Upgrade' \
    '
    -p         : Prepare for Distro upgrade
    -u         : Perform for Distro upgrade
    ' '
    -h         : Show help
    ' '
    -r Release : Target release
    -V Verbose : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
    -D Debug   : Enable debugging mode. Format: one of BL64_DBG_TARGET_*
    '
}

#
# Main
#

declare COMMAND="$BL64_VAR_NULL"
declare OPTION=''
declare RELEASE="$BL64_VAR_NULL"

(($# == 0)) && help && exit 1
while getopts ':pur:V:D:h' OPTION; do
  case "$OPTION" in
  p) COMMAND='prepare' ;;
  u) COMMAND='upgrade' ;;
  r) RELEASE="$OPTARG" ;;
  V) S64_CORE_SET_VERBOSE="$OPTARG" ;;
  D) S64_CORE_SET_DEBUG="$OPTARG" ;;
  h) help && exit 0 ;;
  *) help && exit 1 ;;
  esac
done
bl64_dbg_set_level "$S64_CORE_SET_DEBUG" && bl64_msg_set_level "$S64_CORE_SET_VERBOSE" || exit $?
initialize "$BL64_SCRIPT_ID" || exit $?

bl64_msg_show_batch_start "${BL64_SCRIPT_ID}:$COMMAND"
"${COMMAND}" "$RELEASE"
bl64_msg_show_batch_finish $? "${BL64_SCRIPT_ID}:$COMMAND"
